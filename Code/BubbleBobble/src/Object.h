#pragma once
#include "Entity.h"

#define OBJECT_PHYSICAL_SIZE	14
#define OBJECT_FRAME_SIZE		16

#define POINTS_APPLE	700
#define POINTS_BANANA	500
#define POINTS_CHERRY	700
#define POINTS_GRAPE	4000
#define POINTS_LEMON	350
#define POINTS_ORANGE	300
#define POINTS_PEAR		550
#define POINTS_WATERMELON	600
#define POINTS_BLUE_CANDY	100
#define POINTS_CAKE			2000
#define POINTS_DONUT		1000
#define POINTS_HAMBURGUER	2000
#define POINTS_HOT_DOG		500
#define POINTS_ICE_CREAM	1000
#define POINTS_PINK_CANDY	100
#define POINTS_PIZZA		1000
#define POINTS_POPSICLE		650
#define POINTS_SUSHI		3000
#define POINTS_YELLOW_CANDY	100
#define POINTS_MIQUEL		4000

enum class ObjectType { 

	APPLE, BANANA, CHERRY, GRAPE, LEMON, ORANGE_OBJ, PEAR, WATERMELON,
	BLUE_CANDY, CAKE, DONUT, HAMBURGUER, HOT_DOG, ICE_CREAM, PINK_CANDY, PIZZA, POPSICLE, SUSHI, YELLOW_CANDY, MIQUEL,
						
	_10_BLUE, _20_BLUE, _30_BLUE, _40_BLUE, _50_BLUE, _60_BLUE, _70_BLUE, _80_BLUE, _90_BLUE, _100_BLUE, _150_BLUE, _200_BLUE, _250_BLUE, _300_BLUE, _350_BLUE, _400_BLUE, _450_BLUE, _500_BLUE, _550_BLUE, _600_BLUE, _650_BLUE, _700_BLUE, _750_BLUE, _800_BLUE, _850_BLUE, _900_BLUE, _950_BLUE, _1000_BLUE, _1200_BLUE, _2000_BLUE, _3000_BLUE, _4000_BLUE, _5000_BLUE, _6000_BLUE, _7000_BLUE, _8000_BLUE, _9000_BLUE, _10000_BLUE,

	_10_GREEN, _20_GREEN, _30_GREEN, _40_GREEN, _50_GREEN, _60_GREEN, _70_GREEN, _80_GREEN, _90_GREEN, _100_GREEN, _150_GREEN, _200_GREEN, _250_GREEN, _300_GREEN, _350_GREEN, _400_GREEN, _450_GREEN, _500_GREEN, _550_GREEN, _600_GREEN, _650_GREEN, _700_GREEN, _750_GREEN, _800_GREEN, _850_GREEN, _900_GREEN, _950_GREEN, _1000_GREEN, _1200_GREEN, _2000_GREEN, _3000_GREEN, _4000_GREEN, _5000_GREEN, _6000_GREEN, _7000_GREEN, _8000_GREEN, _9000_GREEN, _10000_GREEN,

	DOT,
};

class Object : public Entity
{
public:
	Object(const Point& p);
	Object(const Point& p, ObjectType obj);
	~Object();

	ObjectType DrawRandObject();
	void DrawPoints();
	void PointsAnimation();
	bool pastTime(float time);

	void DrawDebug(const Color& col) const;
	int Points() const;
	bool point;
	float framecounter;
	bool P1;

private:
	ObjectType type;

};
